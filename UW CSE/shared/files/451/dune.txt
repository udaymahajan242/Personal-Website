*****************************************************
Name - Uday Mahajan
UW SID - 1750102
UW NETID - udaym242
CSE Email - udaym242 [@cs.washington.edu]/[@uw.edu] 

Course - Introduction to Operating Systems (CSE451).
Academic Quarter - Autumn 2018.
Exercise - Dune
****************************************************

Question 1
Since a Dune process is running in ring 0 and has full access to privileged instructions 
(e.g., modifying %cr3), can it corrupt or take control of the underlying Linux kernel? Briefly explain why or why not.

Dune is a system that provides applications with direct but safe access to hardware features such as ring protection
,while preserving the existing OS interfaces for processes. It uses the virtualization
hardware in modern processors using a loadable kernel module that works with unmodified
Linux kernels. It allows hardware-enforced protection within a process in exactly the way kernels protect themselves from
user processes. The supervisor bit in the page table is available to control memory isolation. The system
call instructions trap to the process itself, rather than to the kernel, which is used for to prevent untrusted code
from directly accessing the kernel. Since Dune exposes privileged CPU features without affecting
the existing security model of the underlying OS, the the Dune process cannot take control of the underlying Linux kernel.

Question 2
Briefly describe how you would port Dune to JOS.

We could clone the git repository of Dune from https://github.com/project-dune/dune

For using Dune in jos we can simply call dune_init() to give ring 0 level access 
without allowing the application to modify the kernel.